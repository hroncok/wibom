#!/usr/bin/ruby
# Copyright © 2009-2010, Miro Hrončok [hroncok.cz]. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#	   notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#	   notice, this list of conditions and the following disclaimer in the
#	   documentation and/or other materials provided with the distribution.
#	 * Neither the name of the copyright holder nor the
#	   names of its contributors may be used to endorse or promote products
#	   derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
require 'gtk2'
require 'gettext'
include GetText
bindtextdomain("wibom-gtk")

def error_window (message)
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::ERROR,
										Gtk::MessageDialog::BUTTONS_OK,
								_("Error") )
		dialog.title = _("Error")
		dialog.secondary_text = message
		dialog.run
		dialog.destroy
end

def makepixbuf (icon, size)
	icon_theme = Gtk::IconTheme.default
	begin
	  img = icon_theme.load_icon(icon, size, Gtk::IconTheme::LOOKUP_USE_BUILTIN)
	rescue RuntimeError => e
	  puts e.message
	end
	return img
end

def makeicon (icon, size)
	img = makepixbuf(icon,size)
	return Gtk::Image.new(img)
end

system("../lib/wibom/initialization.sh")
if $?.exitstatus == 127
	error_window(_("Could not find Wine or wibom scripts. You should install both before running wibom-gtk."))
	exit
end

group = Gtk::AccelGroup.new
menubar = Gtk::MenuBar.new

filemenu = Gtk::Menu.new
toolsmenu = Gtk::Menu.new
softwaremenu = Gtk::Menu.new
helpmenu = Gtk::Menu.new

file = Gtk::MenuItem.new(_("_File"))
tools = Gtk::MenuItem.new(_("_Tools"))
software = Gtk::MenuItem.new(_("_Software"))
help = Gtk::MenuItem.new(_("_Help"))

file.submenu = filemenu
tools.submenu = toolsmenu
software.submenu = softwaremenu
help.submenu = helpmenu

menubar.append(file)
menubar.append(tools)
menubar.append(software)
menubar.append(help)

# Create the File menu content.
new = Gtk::ImageMenuItem.new(_("_New bottle"), true)
new.image = makeicon("folder-new",16)

copy = Gtk::ImageMenuItem.new(_("_Clone bottle"), true)
copy.image = makeicon("editcopy",16)

import = Gtk::ImageMenuItem.new(_("_Import bottle"), true)
import.image = makeicon("document-import",16)

delete = Gtk::ImageMenuItem.new(_("_Delete bottle"), true)
delete.image = makeicon("editdelete",16)

quit = Gtk::ImageMenuItem.new(Gtk::Stock::QUIT, group)
filemenu.append(new)
filemenu.append(copy)
filemenu.append(import)
filemenu.append(delete)
filemenu.append(quit)

# Create the Tools menu content.
open   = Gtk::ImageMenuItem.new(_("_Open bottle in file manager"), true)
open.image = makeicon("document-open",16)

winecfg = Gtk::ImageMenuItem.new(_("_Configure bottle"), true)
winecfg.image = makeicon("wine-winecfg",16)

regedit = Gtk::ImageMenuItem.new(_("Edit _registers"), true)
regedit.image = makeicon("wine-notepad",16)

toolsmenu.append(open)
toolsmenu.append(winecfg)
toolsmenu.append(regedit)

# Create the Software menu content.
execute = Gtk::ImageMenuItem.new(Gtk::Stock::EXECUTE, group)

add = Gtk::ImageMenuItem.new(_("_Add or Remove"), true)
add.image = makeicon("wine-uninstaller",16)

winetricks = Gtk::ImageMenuItem.new(_("_Winetricks"), true)
winetricks.image = makeicon("winetricks",16)

softwaremenu.append(execute)
softwaremenu.append(add)
softwaremenu.append(winetricks)

# Create the Help menu content.

contents = Gtk::ImageMenuItem.new(Gtk::Stock::HELP, group)
about	= Gtk::ImageMenuItem.new(Gtk::Stock::ABOUT, group)
helpmenu.append(contents)
helpmenu.append(about)



toolbar = Gtk::Toolbar.new

newbutton = Gtk::ToolButton.new(makeicon("folder-new",24),_("New"))
copybutton = Gtk::ToolButton.new(makeicon("editcopy",24),_("Clone"))
importbutton = Gtk::ToolButton.new(makeicon("document-import",24),_("Import"))
deletebutton = Gtk::ToolButton.new(makeicon("editdelete",24),_("Delete"))
separator = Gtk::SeparatorToolItem.new
openbutton = Gtk::ToolButton.new(makeicon("document-open",24),_("Open"))
winecfgbutton = Gtk::ToolButton.new(makeicon("wine-winecfg",24),_("Configure"))
regeditbutton = Gtk::ToolButton.new(makeicon("wine-notepad",24),_("Regedit"))
separator2 = Gtk::SeparatorToolItem.new
executebutton = Gtk::ToolButton.new(Gtk::Stock::EXECUTE)
addbutton = Gtk::ToolButton.new(makeicon("wine-uninstaller",24),_("Add/Remove"))
winetricksbutton = Gtk::ToolButton.new(makeicon("winetricks",24),_("Winetricks"))

toolbar.show_arrow = true
toolbar.toolbar_style = Gtk::Toolbar::Style::ICONS


toolbar.insert(0, newbutton)
toolbar.insert(1, copybutton)
toolbar.insert(2, importbutton)
toolbar.insert(3, deletebutton)
toolbar.insert(4, separator)
toolbar.insert(5, openbutton)
toolbar.insert(6, winecfgbutton)
toolbar.insert(7, regeditbutton)
toolbar.insert(8, separator2)
toolbar.insert(9, executebutton)
toolbar.insert(10, addbutton)
toolbar.insert(11, winetricksbutton)




# set help text
help = Gtk::Tooltips.new
help.set_tip(new,_("Create a new bottle"), nil)
help.set_tip(newbutton,_("Create a new bottle"), nil)
help.set_tip(copy,_("Create new bottle as a copy of selected one"), nil)
help.set_tip(copybutton,_("Create new bottle as a copy of selected one"), nil)
help.set_tip(import,_("Import an existing bottle"), nil)
help.set_tip(importbutton,_("Import an existing bottle"), nil)
help.set_tip(delete,_("Delete selected bottle"), nil)
help.set_tip(deletebutton,_("Delete selected bottle"), nil)
help.set_tip(openbutton,_("Open selected bottle folder in file manager"), nil)
help.set_tip(open,_("Open selected bottle folder in file manager"), nil)
help.set_tip(winecfgbutton,_("Open Wine config dialog for the selected bottle"), nil)
help.set_tip(winecfg,_("Open Wine config dialog for the selected bottle"), nil)
help.set_tip(regedit,_("Edit the registers of the selected bottle"), nil)
help.set_tip(regeditbutton,_("Edit the registers of the selected bottle"), nil)
help.set_tip(execute,_("Execute a Windows application in selected bottle"), nil)
help.set_tip(executebutton,_("Execute a Windows application in selected bottle"), nil)
help.set_tip(add,_("Add or Remove software into or from selected bottle"), nil)
help.set_tip(addbutton,_("Add or Remove software into or from selected bottle"), nil)
help.set_tip(winetricks,_("Add software into the selected bottle using Winetricks"), nil)
help.set_tip(winetricksbutton,_("Add software into the selected bottle using Winetricks"), nil)


def redraw (bottles)
	file = File.new(`echo $HOME/.local/share/bottles/bottles.lst`.chomp, "r")
	while (line = file.gets)
		bottle = bottles.append
		bottles.set_value(bottle, 0, line.chomp)
	end
	file.close
end


def newbottle
	dialog = Gtk::FileChooserDialog.new(_("Choose an empty directory for the new bottle"),
                                        @window,
										Gtk::FileChooser::ACTION_SELECT_FOLDER,
										nil,
										[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
										[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
	dialog.current_folder = `echo $HOME/.local/share/bottles`.chomp
	while true
		if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
			system("../lib/wibom/new.sh \"#{dialog.filename}\"")
			if $?.exitstatus == 8
				error_window(_("Chosen directory is not empty."))
			else
				bottle = @bottles.append
				@bottles.set_value(bottle, 0, dialog.filename)
				dialog.destroy
				break
			end
		else
			dialog.destroy
			break
		end
	end
end

def clonebottle (chosenbottle)
	dialog = Gtk::FileChooserDialog.new(_("Choose an empty directory for the copy of the selected bottle"),
										@window,
										Gtk::FileChooser::ACTION_SELECT_FOLDER,
										nil,
										[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
										[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
	dialog.current_folder = `echo $HOME/.local/share/bottles`.chomp
	while true
		if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
			system("../lib/wibom/new.sh \"#{dialog.filename}\" \"#{chosenbottle}\"")
			if $?.exitstatus == 8
				error_window(_("Chosen directory is not empty."))
			elsif $?.exitstatus == 5
				error_window(_("Selected bottle is corrupted, have you been smashing files?"))
				dialog.destroy
				break
			else
				bottle = @bottles.append
				@bottles.set_value(bottle, 0, dialog.filename)
				dialog.destroy
				break
			end
		else
			dialog.destroy
			break
		end
	end
end

def importbottle
	dialog = Gtk::FileChooserDialog.new(_("Choose the directory with the bottle"),
										@window,
										Gtk::FileChooser::ACTION_SELECT_FOLDER,
										nil,
										[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
										[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
	dialog.current_folder = `echo $HOME`.chomp
	while true
		if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
			system("../lib/wibom/import.sh \"#{dialog.filename}\"")
			if $?.exitstatus == 5
				error_window(_("Chosen directory is not a bottle."))
			elsif $?.exitstatus == 6
				error_window(_("Chosen directory is already on the list."))
			else
				bottle = @bottles.append
				@bottles.set_value(bottle, 0, dialog.filename)
				dialog.destroy
				break
			end
		else
			dialog.destroy
			break
		end
	end
end

def deletebottle (chosenbottle)
	if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
		error_window(_("You are trying to delete the default bottle. This is not possible."))
	else
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::QUESTION,
										Gtk::MessageDialog::BUTTONS_YES_NO,
										_("Do you really want to delete this bottle?"))
		dialog.secondary_text = chosenbottle
		dialog.run do |response|
			if response == Gtk::Dialog::RESPONSE_YES
				system("../lib/wibom/delete.sh \"#{chosenbottle}\"")
				if $?.exitstatus == 5
					error_window(_("Selected bottle is not on the list, have you been smashing the list?"))
				else
					@bottles.clear
					redraw (@bottles)
					bottle = @bottles.prepend
					@bottles.set_value(bottle, 0, `echo $HOME/.local/share/bottles/default`.chomp)
				end
			end
			dialog.destroy
		end
	end
end

def openbottle (chosenbottle)
	# Standard prefered method
	if (`which xdg-open`.chomp != "")
		system("xdg-open \"#{chosenbottle}\" 2>/dev/null &")
	# Here we should determine prefered file manager, if XDG failed
	# Xfce & Thunar
	elsif ((`pidof xfce4-session`.chomp != "" || `pidof xfdesktop`.chomp != "" || `pidof xfwm4`.chomp != "") && `which thunar`.chomp != "")
		system("thunar \"#{chosenbottle}\" 2>/dev/null &")
	# GNOME & Nautilus
	elsif ((`pidof gnome-wm`.chomp != "" || `pidof gnome-panel`.chomp != "" || `pidof nautilus`.chomp != "") && `which nautilus`.chomp != "")
		system("nautilus \"#{chosenbottle}\" 2>/dev/null &")
	# LXDE & PCMan File Manager
	elsif ((`pidof lxsession`.chomp != "" || `pidof lxpanel`.chomp != "" || `pidof pcmanfm`.chomp != "") && `which pcmanfm`.chomp != "")
		system("pcmanfm \"#{chosenbottle}\" 2>/dev/null &")
	# Terminal for geeks
	else
		system("cd #{chosenbottle}; x-terminal-emulator 2>/dev/null &")
	end
	# I do not determine KDE file managers, because this is a GTK+ frontend
end

def winecfgbottle (chosenbottle)
	system("../lib/wibom/runin.sh \"#{chosenbottle}\" winecfg 2>/dev/null &")
end

def regeditbottle (chosenbottle)
	system("../lib/wibom/runin.sh \"#{chosenbottle}\" regedit 2>/dev/null &")
end

def executeinbottle (chosenbottle)
	no = false
	if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::WARNING,
										Gtk::MessageDialog::BUTTONS_YES_NO,
										_("You want to run software in default bottle"))
		dialog.secondary_text = _("If you install an application to default bottle, it'll be copied to each new bottle. Do you know, what you are doing?")
		dialog.run do |response|
			if response == Gtk::Dialog::RESPONSE_NO
				no = true
			end
			dialog.destroy
		end
	end
	if no == false
		dialog = Gtk::FileChooserDialog.new(_("Choose a Windows application to run"),
											@window,
											Gtk::FileChooser::ACTION_OPEN,
											nil,
											[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
											[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
		dialog.current_folder = chosenbottle.chomp + "/drive_c" # Drive C: of chosen bottle
		while true
			if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
				system("../lib/wibom/runin.sh \"#{chosenbottle}\" wine \"#{dialog.filename}\"")
				exitstatus = $?.exitstatus
				puts exitstatus
				if ((exitstatus == 139) || (exitstatus == 193) || (exitstatus == 1))
					error_window("#{dialog.filename}" + _(" is not a Windows application."))
				else
					dialog.destroy
					break
				end
			else
				dialog.destroy
				break
			end
		end
	end
end

def addtobottle (chosenbottle)
	no = false
	if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::WARNING,
										Gtk::MessageDialog::BUTTONS_YES_NO,
										_("You want to add software to default bottle"))
		dialog.secondary_text = _("If you install an application to default bottle, it'll be copied to each new bottle. Do you know, what you are doing?")
		dialog.run do |response|
			if response == Gtk::Dialog::RESPONSE_NO
				no = true
			end
			dialog.destroy
		end
	end
	if no == false
		system("../lib/wibom/runin.sh \"#{chosenbottle}\" wine uninstaller 2>/dev/null &")
	end
end

def trickbottle (chosenbottle)
	if "" == `which winetricks`.chomp
		error_window(_("It seems Winetricks is not installed. Download it from http://www.kegel.com/wine/winetricks and move it to $PATH (e.g. to /usr/local/share). Don't forget to make it executable!"))
	elsif "" == `which zenity`.chomp
		error_window(_("You need to install Zenity befor using this feature. Use your package manager."))
	else
		no = false
		if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
			dialog = Gtk::MessageDialog.new(@window, 
											Gtk::Dialog::MODAL,
											Gtk::MessageDialog::WARNING,
											Gtk::MessageDialog::BUTTONS_YES_NO,
											_("You want to add software to default bottle"))
			dialog.secondary_text = _("If you install an application to default bottle, it'll be copied to each new bottle. Do you know, what you are doing?")
			dialog.run do |response|
				if response == Gtk::Dialog::RESPONSE_NO
					no = true
				end
				dialog.destroy
			end
		end
		if no == false
			system("../lib/wibom/runin.sh \"#{chosenbottle}\" winetricks 2>/dev/null &")
		end
	end
end

# About Dialog
def aboutdialog
	authors = documenters = ["Miro Hrončok <miro@hroncok.cz>"]
	artists = ["Chris Stark <cstark1@gmail.com>", "GNOME Colors by perfectska04 <perfectska04@gmail.com>", "Bára Havelková <bara.havelkova@seznam.cz>"]

	dialog = Gtk::AboutDialog.new

	icon_theme = Gtk::IconTheme.default
	begin
	  dialog.logo = icon_theme.load_icon("wibom-gtk", 128, Gtk::IconTheme::LOOKUP_USE_BUILTIN)
	rescue RuntimeError => e
	  puts e.message
	end

	# Set application data that will be displayed in the
	# main dialog.
	dialog.version = "0.4"
	dialog.copyright = "Copyright © 2009-2010 Miro Hrončok"
	dialog.comments = _("Wibom is the Wine bottle manager.\nThe Core is written in Bash, this GTK+ 2 frontend is written in Ruby.")

	dialog.license = _("Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
	* Redistributions of source code must retain the above copyright
	  notice, this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright
	  notice, this list of conditions and the following disclaimer in the
	  documentation and/or other materials provided with the distribution.
	* Neither the name of the copyright holder nor the
	  names of its contributors may be used to endorse or promote products
	  derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
")
	dialog.website = "https://sourceforge.net/projects/wibom"
	dialog.website_label = "sourceforge.net/projects/wibom"

	# Set the application authors, documenters and translators.
	dialog.authors = authors
	dialog.documenters = documenters
	dialog.translator_credits = _("translator-credits")
	dialog.artists = artists

	# dialog.show_all
	dialog.run
	dialog.destroy
end



# Main part
@bottles = Gtk::ListStore.new(String)

bottleslist = Gtk::TreeView.new(@bottles)
bottleslist.model = @bottles

renderer = Gtk::CellRendererText.new
column = Gtk::TreeViewColumn.new(_("Bottles"), renderer, "text" => 0)
bottleslist.append_column(column)

redraw (@bottles)

bottle = @bottles.prepend
@bottles.set_value(bottle, 0, `echo $HOME/.local/share/bottles/default`.chomp)

pointer = bottleslist.selection
pointer.mode = Gtk::SELECTION_BROWSE
pointer.select_iter(bottle)
chosenbottle = @bottles.get_value(bottle, 0)




newbutton.signal_connect("clicked") { newbottle }
new.signal_connect("activate")	  { newbottle }

copybutton.signal_connect("clicked") { clonebottle(chosenbottle) }
copy.signal_connect("activate")	  { clonebottle(chosenbottle) }

importbutton.signal_connect("clicked") { importbottle }
import.signal_connect("activate")	  { importbottle }

deletebutton.signal_connect("clicked") {
	deletebottle(chosenbottle)
	pointer = bottleslist.selection
	pointer.mode = Gtk::SELECTION_BROWSE
	bottle = @bottles.iter_first
	pointer.select_iter(bottle)
	chosenbottle = @bottles.get_value(bottle, 0)
}
delete.signal_connect("activate")	  {
	deletebottle(chosenbottle)
	pointer = bottleslist.selection
	pointer.mode = Gtk::SELECTION_BROWSE
	bottle = @bottles.iter_first
	pointer.select_iter(bottle)
	chosenbottle = @bottles.get_value(bottle, 0)
}

openbutton.signal_connect("clicked"){ openbottle(chosenbottle) }
open.signal_connect("activate")	{ openbottle(chosenbottle) }

winecfgbutton.signal_connect("clicked") { winecfgbottle(chosenbottle) }
winecfg.signal_connect("activate")	{ winecfgbottle(chosenbottle) }

regeditbutton.signal_connect("clicked") { regeditbottle(chosenbottle) }
regedit.signal_connect("activate")	  { regeditbottle(chosenbottle) }

executebutton.signal_connect("clicked") { executeinbottle(chosenbottle) }
execute.signal_connect("activate")	  { executeinbottle(chosenbottle) }

addbutton.signal_connect("clicked") { addtobottle(chosenbottle) }
add.signal_connect("activate")	  { addtobottle(chosenbottle) }

winetricksbutton.signal_connect("clicked") { trickbottle(chosenbottle) }
winetricks.signal_connect("activate")	  { trickbottle(chosenbottle) }

contents.signal_connect("activate")	  { system("xdg-open file://") }

bottleslist.signal_connect("cursor-changed") {
	bottle = pointer.selected
	chosenbottle = @bottles.get_value(bottle, 0)
}

about.signal_connect("activate")	{ aboutdialog }

quit.signal_connect("activate")	{ Gtk.main_quit }

scrolled_win = Gtk::ScrolledWindow.new
scrolled_win.add(bottleslist)
scrolled_win.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC)
scrolled_win.set_size_request(-1, 150)

# packing together
vbox = Gtk::VBox.new(false,5)
vbox.pack_start_defaults(menubar)
vbox.pack_start_defaults(toolbar)
vbox.pack_start_defaults(scrolled_win)

# Setting icon for all windows
icon_list = [makepixbuf("wibom-gtk", 128), makepixbuf("wibom-gtk", 64), makepixbuf("wibom-gtk", 48), makepixbuf("wibom-gtk", 32), makepixbuf("wibom-gtk", 24), makepixbuf("wibom-gtk", 16)]
Gtk::Window.set_default_icon_list(icon_list)

#main window initialization
@window = Gtk::Window.new

@window.signal_connect("destroy") {
  Gtk.main_quit
}


# adding vbox and space between it and main window
@window.add_accel_group(group)

@window.add(vbox)
@window.set_size_request(305, -1)


# set window title and show & start main window
@window.set_title _("Wine bottle management")
@window.show_all

# No bottles on the list? Show the short guide.
if "" == `cat $HOME/.local/share/bottles/bottles.lst`.chomp
	dialog = Gtk::MessageDialog.new(@window, 
									Gtk::Dialog::MODAL,
									Gtk::MessageDialog::INFO,
									Gtk::MessageDialog::BUTTONS_OK,
							_("What should you know before using wibom:") )
	dialog.title = _("First run")
	dialog.secondary_text = _("What is a Wine bottle?
	A Wine bottle has nothing to do with the famous
	alcoholic drink. It is a separated and isolated
	instance of fake Windows file structure and
	registers, where Wine can run Windows apps.")
	dialog.secondary_text += "\n\n"
	dialog.secondary_text += _("What can I do with more bottles?
	You are able to do whatever you want with one
	bottle without any risk to destroy other bottles.
	It means you can have bottle for native DirectX,
	bottle without sound, bottle with IE 6 and another
	bottle with IE 7.")
	dialog.secondary_text += "\n\n"
	dialog.secondary_text += _("What should I do with the default bottle?
	The default bottle will be copied each time you
	create a new bottle. You shouldn't install apps
	inside, unless you want them in each bottle.
	You should configure it well.")
	dialog.run
	dialog.destroy
end

Gtk.main
