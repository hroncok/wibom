#!/usr/bin/ruby
# Copyright © 2009-2010, Miro Hrončok [hroncok.cz]. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	 * Redistributions of source code must retain the above copyright
#	   notice, this list of conditions and the following disclaimer.
#	 * Redistributions in binary form must reproduce the above copyright
#	   notice, this list of conditions and the following disclaimer in the
#	   documentation and/or other materials provided with the distribution.
#	 * Neither the name of the copyright holder nor the
#	   names of its contributors may be used to endorse or promote products
#	   derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
require 'gtk2'
require 'gettext'
include GetText
bindtextdomain("wibom-gtk")

# To use relative pathes
@libdir = File.dirname(__FILE__) + "/../lib/wibom"

# Error window
def error_window (message)
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::ERROR,
										Gtk::MessageDialog::BUTTONS_OK,
								_("Error") )
		dialog.title = _("Error")
		dialog.secondary_text = message
		dialog.run
		dialog.destroy
end

# Make pixbuf from icon name and size
def makepixbuf (icon, size)
	icon_theme = Gtk::IconTheme.default
	begin
	  img = icon_theme.load_icon(icon, size, Gtk::IconTheme::LOOKUP_USE_BUILTIN)
	rescue RuntimeError => e
	  puts e.message
	end
	return img
end

# Make icon from icon name and size
def makeicon (icon, size)
	img = makepixbuf(icon,size)
	return Gtk::Image.new(img)
end

# Use ~ instead of the absolute path
def tildize (path)
	tmp = path
	if tmp.include?(`echo $HOME`.chomp)
		tmp[`echo $HOME`.chomp] = "~"
	end
	return tmp
end

# Use the absolute path instead of ~
def untildize (path)
	tmp = path
	if tmp.include?("~")
		tmp["~"] = `echo $HOME`.chomp
	end
	return tmp
end

# Initialize Wibom (good for first run)
system(@libdir + "/initialization.sh")
if $?.exitstatus == 127
	error_window(_("Could not find Wine or wibom scripts. You should install both before running wibom-gtk."))
	exit
end

# Blah blah, don't exactly know, why this should be here
group = Gtk::AccelGroup.new

# Menu bar
menubar = Gtk::MenuBar.new

filemenu = Gtk::Menu.new
toolsmenu = Gtk::Menu.new
softwaremenu = Gtk::Menu.new
helpmenu = Gtk::Menu.new

file = Gtk::MenuItem.new(_("_File"))
tools = Gtk::MenuItem.new(_("_Tools"))
software = Gtk::MenuItem.new(_("_Software"))
help = Gtk::MenuItem.new(_("_Help"))

file.submenu = filemenu
tools.submenu = toolsmenu
software.submenu = softwaremenu
help.submenu = helpmenu

menubar.append(file)
menubar.append(tools)
menubar.append(software)
menubar.append(help)

# Create the File menu content.
new = Gtk::ImageMenuItem.new(_("_New bottle"), true)
new.image = makeicon("folder-new",16)

copy = Gtk::ImageMenuItem.new(_("_Clone bottle"), true)
copy.image = makeicon("editcopy",16)

import = Gtk::ImageMenuItem.new(_("_Import bottle"), true)
import.image = makeicon("document-import",16)

delete = Gtk::ImageMenuItem.new(_("_Delete bottle"), true)
delete.image = makeicon("editdelete",16)

quit = Gtk::ImageMenuItem.new(Gtk::Stock::QUIT, group)

filemenu.append(new)
filemenu.append(copy)
filemenu.append(import)
filemenu.append(delete)
filemenu.append(quit)

# Create the Tools menu content.
open   = Gtk::ImageMenuItem.new(_("_Open bottle in file manager"), true)
open.image = makeicon("document-open",16)

winecfg = Gtk::ImageMenuItem.new(_("_Configure bottle"), true)
winecfg.image = makeicon("wine-winecfg",16)

regedit = Gtk::ImageMenuItem.new(_("Edit _registers"), true)
regedit.image = makeicon("wine-notepad",16)

kill = Gtk::ImageMenuItem.new(_("_Kill apps executed in bottle"), true)
kill.image = makeicon("stop",16)

colorize = Gtk::ImageMenuItem.new(_("Colori_ze bottle(s)..."), true)
colorize.image = makeicon("preferences-desktop-theme",16)

toolsmenu.append(open)
toolsmenu.append(winecfg)
toolsmenu.append(regedit)
toolsmenu.append(kill)
toolsmenu.append(colorize)

# Create the Software menu content.
execute = Gtk::ImageMenuItem.new(Gtk::Stock::EXECUTE, group)

add = Gtk::ImageMenuItem.new(_("_Add or Remove"), true)
add.image = makeicon("wine-uninstaller",16)

winetricks = Gtk::ImageMenuItem.new(_("_Winetricks"), true)
winetricks.image = makeicon("winetricks",16)

softwaremenu.append(execute)
softwaremenu.append(add)
softwaremenu.append(winetricks)

# Create the Help menu content.
contents = Gtk::ImageMenuItem.new(Gtk::Stock::HELP, group)
about	= Gtk::ImageMenuItem.new(Gtk::Stock::ABOUT, group)
helpmenu.append(contents)
helpmenu.append(about)

# Toolbar
toolbar = Gtk::Toolbar.new

newbutton = Gtk::ToolButton.new(makeicon("folder-new",24),_("New"))
copybutton = Gtk::ToolButton.new(makeicon("editcopy",24),_("Clone"))
importbutton = Gtk::ToolButton.new(makeicon("document-import",24),_("Import"))
deletebutton = Gtk::ToolButton.new(makeicon("editdelete",24),_("Delete"))
separator = Gtk::SeparatorToolItem.new
openbutton = Gtk::ToolButton.new(makeicon("document-open",24),_("Open"))
winecfgbutton = Gtk::ToolButton.new(makeicon("wine-winecfg",24),_("Configure"))
regeditbutton = Gtk::ToolButton.new(makeicon("wine-notepad",24),_("Regedit"))
killbutton = Gtk::ToolButton.new(makeicon("stop",24),_("Kill"))
colorizebutton = Gtk::ToolButton.new(makeicon("preferences-desktop-theme",24),_("Colorize"))
separator2 = Gtk::SeparatorToolItem.new
executebutton = Gtk::ToolButton.new(Gtk::Stock::EXECUTE)
addbutton = Gtk::ToolButton.new(makeicon("wine-uninstaller",24),_("Add/Remove"))
winetricksbutton = Gtk::ToolButton.new(makeicon("winetricks",24),_("Winetricks"))

toolbar.show_arrow = true
toolbar.toolbar_style = Gtk::Toolbar::Style::ICONS

# Insertation
toolbar.insert(0, newbutton)
toolbar.insert(1, copybutton)
toolbar.insert(2, importbutton)
toolbar.insert(3, deletebutton)
toolbar.insert(4, separator)
toolbar.insert(5, openbutton)
toolbar.insert(6, winecfgbutton)
toolbar.insert(7, regeditbutton)
toolbar.insert(8, killbutton)
toolbar.insert(9, colorizebutton)
toolbar.insert(10, separator2)
toolbar.insert(11, executebutton)
toolbar.insert(12, addbutton)
toolbar.insert(13, winetricksbutton)

# Set help text
help = Gtk::Tooltips.new
help.set_tip(new,_("Create a new bottle"), nil)
help.set_tip(newbutton,_("Create a new bottle"), nil)
help.set_tip(copy,_("Create new bottle as a copy of selected one"), nil)
help.set_tip(copybutton,_("Create new bottle as a copy of selected one"), nil)
help.set_tip(import,_("Import an existing bottle"), nil)
help.set_tip(importbutton,_("Import an existing bottle"), nil)
help.set_tip(delete,_("Delete selected bottle"), nil)
help.set_tip(deletebutton,_("Delete selected bottle"), nil)
help.set_tip(openbutton,_("Open selected bottle folder in file manager"), nil)
help.set_tip(open,_("Open selected bottle folder in file manager"), nil)
help.set_tip(winecfgbutton,_("Open Wine config dialog for the selected bottle"), nil)
help.set_tip(winecfg,_("Open Wine config dialog for the selected bottle"), nil)
help.set_tip(regedit,_("Edit the registers of the selected bottle"), nil)
help.set_tip(regeditbutton,_("Edit the registers of the selected bottle"), nil)
help.set_tip(kill,_("Kill all Windows proceses executed in the selected bottle"), nil)
help.set_tip(killbutton,_("Kill all Windows proceses executed in the selected bottle"), nil)
help.set_tip(colorize,_("Set the color theme of selected or all bottles according to your GTK settings"), nil)
help.set_tip(colorizebutton,_("Set the color theme of selected or all bottles according to your GTK settings"), nil)
help.set_tip(execute,_("Execute a Windows application in selected bottle"), nil)
help.set_tip(executebutton,_("Execute a Windows application in selected bottle"), nil)
help.set_tip(add,_("Add or Remove software into or from selected bottle"), nil)
help.set_tip(addbutton,_("Add or Remove software into or from selected bottle"), nil)
help.set_tip(winetricks,_("Add software into the selected bottle using Winetricks"), nil)
help.set_tip(winetricksbutton,_("Add software into the selected bottle using Winetricks"), nil)

# Redraw bottles list
def redraw (bottles)
	file = File.new(`echo $HOME/.local/share/bottles/bottles.lst`.chomp, "r")
	while (line = file.gets)
		bottle = bottles.append
		bottles.set_value(bottle, 0, tildize(line.chomp))
	end
	file.close
end

# Create new bottle
def newbottle
	dialog = Gtk::FileChooserDialog.new(_("Choose or create an empty directory for the new bottle"),
                                        @window,
										Gtk::FileChooser::ACTION_CREATE_FOLDER,
										nil,
										[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
										[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
	dialog.current_folder = `echo $HOME/.local/share/bottles`.chomp
	while true
		if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
			system(@libdir + "/new.sh \"#{dialog.filename}\"")
			if $?.exitstatus == 8
				error_window(_("Chosen directory is not empty."))
			else
				bottle = @bottles.append
				@bottles.set_value(bottle, 0, tildize(dialog.filename))
				dialog.destroy
				break
			end
		else
			dialog.destroy
			break
		end
	end
end

# Clone bottle
def clonebottle (chosenbottle)
	dialog = Gtk::FileChooserDialog.new(_("Choose or create an empty directory for the copy of the selected bottle"),
										@window,
										Gtk::FileChooser::ACTION_CREATE_FOLDER,
										nil,
										[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
										[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
	dialog.current_folder = `echo $HOME/.local/share/bottles`.chomp
	while true
		if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
			system(@libdir + "/new.sh \"#{dialog.filename}\" \"#{chosenbottle}\"")
			if $?.exitstatus == 8
				error_window(_("Chosen directory is not empty."))
			elsif $?.exitstatus == 5
				error_window(_("Selected bottle is corrupted, have you been smashing files?"))
				dialog.destroy
				break
			else
				bottle = @bottles.append
				@bottles.set_value(bottle, 0, tildize(dialog.filename))
				dialog.destroy
				break
			end
		else
			dialog.destroy
			break
		end
	end
end

# Import bottle
def importbottle
	dialog = Gtk::FileChooserDialog.new(_("Choose the directory with the bottle"),
										@window,
										Gtk::FileChooser::ACTION_SELECT_FOLDER,
										nil,
										[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
										[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
	dialog.current_folder = `echo $HOME`.chomp
	while true
		if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
			system(@libdir + "/import.sh \"#{dialog.filename}\"")
			if $?.exitstatus == 5
				error_window(_("Chosen directory is not a bottle."))
			elsif $?.exitstatus == 6
				error_window(_("Chosen directory is already on the list."))
			else
				bottle = @bottles.append
				@bottles.set_value(bottle, 0, tildize(dialog.filename))
				dialog.destroy
				break
			end
		else
			dialog.destroy
			break
		end
	end
end

# Delete bottle
def deletebottle (chosenbottle)
	if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
		error_window(_("You are trying to delete the default bottle. This is not possible."))
	else
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::QUESTION,
										Gtk::MessageDialog::BUTTONS_YES_NO,
										_("Do you really want to delete this bottle?"))
		dialog.secondary_text = tildize(chosenbottle)
		dialog.run do |response|
			if response == Gtk::Dialog::RESPONSE_YES
				system(@libdir + "/delete.sh \"#{chosenbottle}\"")
				if $?.exitstatus == 5
					error_window(_("Selected bottle is not on the list, have you been smashing the list?"))
				else
					@bottles.clear
					redraw (@bottles)
					bottle = @bottles.prepend
					@bottles.set_value(bottle, 0, "~/.local/share/bottles/default")
				end
			end
			dialog.destroy
		end
	end
end

# Open bottle in filemanager
def openbottle (chosenbottle)
	# Standard prefered method
	if (`which xdg-open`.chomp != "")
		Thread.new { system("xdg-open \"#{chosenbottle}\"") }
	# Here we should determine prefered file manager, if XDG failed
	# Xfce & Thunar
	elsif ((`pidof xfce4-session`.chomp != "" || `pidof xfdesktop`.chomp != "" || `pidof xfwm4`.chomp != "") && `which thunar`.chomp != "")
		Thread.new { system("thunar \"#{chosenbottle}\"") }
	# GNOME & Nautilus
	elsif ((`pidof gnome-wm`.chomp != "" || `pidof gnome-panel`.chomp != "" || `pidof nautilus`.chomp != "") && `which nautilus`.chomp != "")
		Thread.new { system("nautilus \"#{chosenbottle}\"") }
	# LXDE & PCMan File Manager
	elsif ((`pidof lxsession`.chomp != "" || `pidof lxpanel`.chomp != "" || `pidof pcmanfm`.chomp != "") && `which pcmanfm`.chomp != "")
		Thread.new { system("pcmanfm \"#{chosenbottle}\"") }
	# Terminal for geeks
	else
		Thread.new { system("cd #{chosenbottle}; x-terminal-emulator") }
	end
	# I do not determine KDE file managers, because this is a GTK+ frontend
end

def winecfgbottle (chosenbottle)
	Thread.new { system(@libdir + "/runin.sh \"#{chosenbottle}\" winecfg") }
end

def regeditbottle (chosenbottle)
	Thread.new { system(@libdir + "/runin.sh \"#{chosenbottle}\" regedit") }
end

def killbottle (chosenbottle)
	dialog = Gtk::MessageDialog.new(@window, 
									Gtk::Dialog::MODAL,
									Gtk::MessageDialog::QUESTION,
									Gtk::MessageDialog::BUTTONS_YES_NO,
									_("Kill all wine proceses?"))
	dialog.secondary_text = _("Do you really want to kill all wine proceses executed in the selected bottle? All unsaved work will be lost.")
	dialog.run do |response|
		if response == Gtk::Dialog::RESPONSE_YES
			Thread.new { system(@libdir + "/runin.sh \"#{chosenbottle}\" wineserver -kill") }
		end
		dialog.destroy
	end
end

def colorizebottle (chosenbottle)
	if "" == `which python`.chomp
		error_window(_("You need to install Python befor using this feature. Use your package manager."))
	else
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::WARNING,
										Gtk::MessageDialog::BUTTONS_NONE,
								_("Colorize the selected bottle or all of them?") )
		dialog.title = _("Colorize")
		dialog.secondary_text = _("This feature sets the color scheme of the selected bottle or of all of them according to your GTK settings. It downloads and runs a Python script, but it is a little tricky. It should probably work well, but it does not with some GTK engines. You also have to be online if you are using this first time.")
		dialog.secondary_text += "\n\n"
		dialog.secondary_text += _("It is recommanded to create a new bottle to test it, then check the result (e.g. by running a config dialog in testing bottle) and if it works well, apply it to all bottles. If you haven't tried this before with this GTK theme, you shouldn't apply this feature on an working bottle, because it is hard to undo.")
		dialog.secondary_text += "\n\n"
		dialog.secondary_text += _("If you want to colorize all of your bottles, it may take a bit of time.")
		dialog.secondary_text += "\n\n"
		dialog.secondary_text += _("The colorizing script wine_colors_from_gtk.py © Endolith (GPL)")
		dialog.add_buttons([Gtk::Stock::CANCEL,1], [_("Selected bottle"),2], [_("All bottles"),3])
		dialog.run do |response|
			if response == 2 # Colorize the selected bottle
				really = Gtk::MessageDialog.new(@window, 
												Gtk::Dialog::MODAL,
												Gtk::MessageDialog::WARNING,
												Gtk::MessageDialog::BUTTONS_YES_NO,
												_("You are going to use a tricky feature"))
				really.secondary_text = _("This feature should be tested on a useless bottle, do you want to continue?")
				really.run do |response|
					if response == Gtk::Dialog::RESPONSE_YES
						system(@libdir + "/colorize.sh \"#{chosenbottle}\"")
						if $?.exitstatus == 4
							error_window(_("You are probably offline (or the Github is) and you have never downloaded this script before."))
						end
					end
					really.destroy
				end
			elsif response == 3 # Colorize all bottles
				really = Gtk::MessageDialog.new(@window, 
												Gtk::Dialog::MODAL,
												Gtk::MessageDialog::WARNING,
												Gtk::MessageDialog::BUTTONS_YES_NO,
												_("You are going to use a tricky feature"))
				really.secondary_text = _("Have you tested this feature before on a useless bottle?")
				really.run do |response|
					if response == Gtk::Dialog::RESPONSE_YES
						system(@libdir + "/colorize.sh ALL")
						if $?.exitstatus == 4
							error_window(_("You are probably offline (or the Github is) and you have never downloaded this script before."))
						end
					end
					really.destroy
				end
			end
			dialog.destroy
		end
	end
end

# Execute Windows app in bottle
def executeinbottle (chosenbottle)
	no = false
	if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::WARNING,
										Gtk::MessageDialog::BUTTONS_YES_NO,
										_("You want to run software in default bottle"))
		dialog.secondary_text = _("If you install an application to default bottle, it'll be copied to each new bottle. Do you know, what you are doing?")
		dialog.run do |response|
			if response == Gtk::Dialog::RESPONSE_NO
				no = true
			end
			dialog.destroy
		end
	end
	if no == false
		dialog = Gtk::FileChooserDialog.new(_("Choose a Windows application to run"),
											@window,
											Gtk::FileChooser::ACTION_OPEN,
											nil,
											[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
											[Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
		dialog.current_folder = chosenbottle.chomp + "/dosdevices/c:" # Drive C: of chosen bottle
		#Filters
		exemsi = Gtk::FileFilter.new
		exemsi.name = _("Windows executables")
		exemsi.add_mime_type("application/x-ms-dos-executable")
		exemsi.add_mime_type("application/x-msi")
		exemsi.add_mime_type("application/x-win-lnk")
		dialog.add_filter(exemsi)
		allfiles = Gtk::FileFilter.new
		allfiles.name = _("All files")
		allfiles.add_pattern("*")
		dialog.add_filter(allfiles)
		# Script
		scripttoggle = Gtk::CheckButton.new(_("Save a script"))
		scripttoggle.show
		# Option to run in emulated desktop
		toggle = Gtk::CheckButton.new(_("Run in an emulated virtual desktop"))
		toggle.show
		# Choose the resolution
		resolutionlabel = Gtk::Label.new(_("Resolution:"))
		resolutionlabel.show
		resolution = Gtk::ComboBox.new(is_text_only = true)
		resolution.append_text("1024x768")
		resolution.append_text("800x600")
		resolution.append_text("640x480")
		resolution.active = 0
		resolution.show
		# Sensitivity
		resolutionlabel.sensitive = FALSE
		resolution.sensitive = FALSE
		toggle.signal_connect("toggled") {
			resolutionlabel.sensitive = toggle.active?
			resolution.sensitive = toggle.active?
		}
		# Window HBox
		windowhbox = Gtk::HBox.new(false,5)
		windowhbox.pack_start_defaults(scripttoggle)
		windowhbox.pack_start_defaults(toggle)
		windowhbox.pack_start_defaults(resolutionlabel)
		windowhbox.pack_start_defaults(resolution)
		dialog.extra_widget = windowhbox
		# Tooltips
		help = Gtk::Tooltips.new
		help.set_tip(scripttoggle,_("Save a Bash script, that can be used without wibom"), nil)
		help.set_tip(toggle,_("Whether the application should be run in an emulated virtual desktop"), nil)
		help.set_tip(resolution,_("The resolution of the virtual desktop"), nil)
		help.set_tip(resolutionlabel,_("The resolution of the virtual desktop"), nil)
		while true
			if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
				# Should the script be saved?
				if scripttoggle.active?
					scriptdialog = Gtk::FileChooserDialog.new(_("Save the script as..."),
														dialog,
														Gtk::FileChooser::ACTION_SAVE,
														nil,
														[Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
														[Gtk::Stock::SAVE, Gtk::Dialog::RESPONSE_ACCEPT])
					scriptdialog.current_folder = `echo $HOME`.chomp
					while true
						if scriptdialog.run == Gtk::Dialog::RESPONSE_ACCEPT
							script = "--script \"#{scriptdialog.filename}\" " # Don't forgot the last space
						else
							script = ""
						end
						scriptdialog.destroy
						break
					end
				else
					script = ""
				end
				# Should be run in emulated desktop?
				if toggle.active?
					explorer = "explorer /desktop=Wibom,#{resolution.active_text} " # Don't forgot the last space
				else
					explorer = ""
				end
				# Run it in differend thread, but keep the exitstatus
				winapp = Thread.new {
					system("cd #{@libdir}; absolutelibdir=\"`pwd`\"; cd \"#{dialog.current_folder}\"; ${absolutelibdir}/runin.sh #{script}\"#{chosenbottle}\" wine #{explorer}start /unix \"#{dialog.filename}\"")
					exitstatus = $?.exitstatus
					Thread.current["exitstatus"] = exitstatus # Putting out of the thread
				}
				# dialog.cursor = Gdk::Cursor.new("WATCH") # doesn't work at all
				system("sleep 4") # Waiting for nonWindows app to exit
				# dialog.cursor = nil
				exitstatus = winapp["exitstatus"]
				if ((exitstatus == 139) || (exitstatus == 193) || (exitstatus == 1))
					error_window("#{dialog.filename}" + _(" is not a Windows application."))
				else
					dialog.destroy
					break
				end
			else
				dialog.destroy
				break
			end
		end
	end
end

# Add/Remove Wine function
def addtobottle (chosenbottle)
	no = false
	if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
		dialog = Gtk::MessageDialog.new(@window, 
										Gtk::Dialog::MODAL,
										Gtk::MessageDialog::WARNING,
										Gtk::MessageDialog::BUTTONS_YES_NO,
										_("You want to add software to default bottle"))
		dialog.secondary_text = _("If you install an application to default bottle, it'll be copied to each new bottle. Do you know, what you are doing?")
		dialog.run do |response|
			if response == Gtk::Dialog::RESPONSE_NO
				no = true
			end
			dialog.destroy
		end
	end
	if no == false
		Thread.new { system(@libdir + "/runin.sh \"#{chosenbottle}\" wine uninstaller") }
	end
end

# Run winetricks in bottle
def trickbottle (chosenbottle)
	if "" == `which winetricks`.chomp
		error_window(_("It seems Winetricks is not installed. Download it from http://www.kegel.com/wine/winetricks and move it to $PATH (e.g. to /usr/local/share). Don't forget to make it executable!"))
	elsif "" == `which zenity`.chomp
		error_window(_("You need to install Zenity befor using this feature. Use your package manager."))
	else
		no = false
		if chosenbottle == `echo $HOME/.local/share/bottles/default`.chomp
			dialog = Gtk::MessageDialog.new(@window, 
											Gtk::Dialog::MODAL,
											Gtk::MessageDialog::WARNING,
											Gtk::MessageDialog::BUTTONS_YES_NO,
											_("You want to add software to default bottle"))
			dialog.secondary_text = _("If you install an application to default bottle, it'll be copied to each new bottle. Do you know, what you are doing?")
			dialog.run do |response|
				if response == Gtk::Dialog::RESPONSE_NO
					no = true
				end
				dialog.destroy
			end
		end
		if no == false
			Thread.new { system(@libdir + "/runin.sh \"#{chosenbottle}\" winetricks") }
		end
	end
end

# About Dialog
def aboutdialog
	authors = documenters = ["Miro Hrončok <miro@hroncok.cz>"]
	artists = [_("Icon by") + " Chris Stark <cstark1@gmail.com>", _("GNOME Colors by") + " perfectska04 <perfectska04@gmail.com>", _("The Leaflet by") + " Bára Havelková <bara.havelkova@seznam.cz>"]

	dialog = Gtk::AboutDialog.new

	icon_theme = Gtk::IconTheme.default
	begin
	  dialog.logo = icon_theme.load_icon("wibom-gtk", 128, Gtk::IconTheme::LOOKUP_USE_BUILTIN)
	rescue RuntimeError => e
	  puts e.message
	end

	# Set application data that will be displayed in the
	# main dialog.
	dialog.version = "0.9"
	dialog.copyright = "Copyright © 2009-2010 Miro Hrončok"
	dialog.comments = _("Wibom is the Wine bottle manager.\nThe Core is written in Bash, this GTK+ 2 frontend is written in Ruby.")

	dialog.license = _("Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
	* Redistributions of source code must retain the above copyright
	  notice, this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright
	  notice, this list of conditions and the following disclaimer in the
	  documentation and/or other materials provided with the distribution.
	* Neither the name of the copyright holder nor the
	  names of its contributors may be used to endorse or promote products
	  derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
")
	dialog.website = "http://wibom.sourceforge.net/"
	dialog.website_label = "wibom.sourceforge.net"

	# Set the application authors, documenters and translators.
	dialog.authors = authors
	dialog.documenters = documenters
	dialog.translator_credits = _("translator-credits")
	dialog.artists = artists

	# dialog.show_all
	dialog.run
	dialog.destroy
end



# Main part
@bottles = Gtk::ListStore.new(String)

bottleslist = Gtk::TreeView.new(@bottles)
bottleslist.model = @bottles

renderer = Gtk::CellRendererText.new
column = Gtk::TreeViewColumn.new(_("Bottles"), renderer, "text" => 0)
bottleslist.append_column(column)

redraw (@bottles)

bottle = @bottles.prepend
@bottles.set_value(bottle, 0, "~/.local/share/bottles/default")

pointer = bottleslist.selection
pointer.mode = Gtk::SELECTION_BROWSE
pointer.select_iter(bottle)
chosenbottle = @bottles.get_value(bottle, 0)

# Signals
newbutton.signal_connect("clicked") { newbottle }
new.signal_connect("activate")	  { newbottle }

copybutton.signal_connect("clicked") { clonebottle(untildize(chosenbottle)) }
copy.signal_connect("activate")	  { clonebottle(untildize(chosenbottle)) }

importbutton.signal_connect("clicked") { importbottle }
import.signal_connect("activate")	  { importbottle }

deletebutton.signal_connect("clicked") {
	deletebottle(untildize(chosenbottle))
	pointer = bottleslist.selection
	pointer.mode = Gtk::SELECTION_BROWSE
	bottle = @bottles.iter_first
	pointer.select_iter(bottle)
	chosenbottle = @bottles.get_value(bottle, 0)
}
delete.signal_connect("activate")	  {
	deletebottle(untildize(chosenbottle))
	pointer = bottleslist.selection
	pointer.mode = Gtk::SELECTION_BROWSE
	bottle = @bottles.iter_first
	pointer.select_iter(bottle)
	chosenbottle = @bottles.get_value(bottle, 0)
}

openbutton.signal_connect("clicked"){ openbottle(untildize(chosenbottle)) }
open.signal_connect("activate")	{ openbottle(untildize(chosenbottle)) }

winecfgbutton.signal_connect("clicked") { winecfgbottle(untildize(chosenbottle)) }
winecfg.signal_connect("activate")	{ winecfgbottle(untildize(chosenbottle)) }

regeditbutton.signal_connect("clicked") { regeditbottle(untildize(chosenbottle)) }
regedit.signal_connect("activate")	  { regeditbottle(untildize(chosenbottle)) }

killbutton.signal_connect("clicked") { killbottle(untildize(chosenbottle)) }
kill.signal_connect("activate")	  { killbottle(untildize(chosenbottle)) }

colorizebutton.signal_connect("clicked") { colorizebottle(untildize(chosenbottle)) }
colorize.signal_connect("activate")	  { colorizebottle(untildize(chosenbottle)) }

executebutton.signal_connect("clicked") { executeinbottle(untildize(chosenbottle)) }
execute.signal_connect("activate")	  { executeinbottle(untildize(chosenbottle)) }

addbutton.signal_connect("clicked") { addtobottle(untildize(chosenbottle)) }
add.signal_connect("activate")	  { addtobottle(untildize(chosenbottle)) }

winetricksbutton.signal_connect("clicked") { trickbottle(untildize(chosenbottle)) }
winetricks.signal_connect("activate")	  { trickbottle(untildize(chosenbottle)) }

contents.signal_connect("activate")	  { error_window(_("The documentation is not ready.")) }

# Moving around the list
bottleslist.signal_connect("cursor-changed") {
	bottle = pointer.selected
	chosenbottle = @bottles.get_value(bottle, 0)
}

about.signal_connect("activate")	{ aboutdialog }

quit.signal_connect("activate")	{ Gtk.main_quit }

scrolled_win = Gtk::ScrolledWindow.new
scrolled_win.add(bottleslist)
scrolled_win.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC)
scrolled_win.set_size_request(-1, 300)

# packing together
vbox = Gtk::VBox.new(false,5)
vbox.pack_start_defaults(menubar)
vbox.pack_start_defaults(toolbar)
vbox.pack_start_defaults(scrolled_win)

# Setting icon for all windows
icon_list = [makepixbuf("wibom-gtk", 128), makepixbuf("wibom-gtk", 64), makepixbuf("wibom-gtk", 48), makepixbuf("wibom-gtk", 32), makepixbuf("wibom-gtk", 24), makepixbuf("wibom-gtk", 16)]
Gtk::Window.set_default_icon_list(icon_list)

#main window initialization
@window = Gtk::Window.new

# Closing the window
@window.signal_connect("destroy") { Gtk.main_quit }


# adding accel group and vbox
@window.add_accel_group(group)

@window.add(vbox)
@window.set_default_size(450, -1)


# set window title and show & start main window
@window.set_title _("Wine bottle management")
@window.show_all

# No bottles on the list? Show the short guide.
if "" == `cat $HOME/.local/share/bottles/bottles.lst`.chomp
	dialog = Gtk::MessageDialog.new(@window, 
									Gtk::Dialog::MODAL,
									Gtk::MessageDialog::INFO,
									Gtk::MessageDialog::BUTTONS_OK,
							_("What should you know before using wibom:") )
	dialog.title = _("First run")
	dialog.secondary_text = _("What is a Wine bottle?
	A Wine bottle has nothing to do with the famous
	alcoholic drink. It is a separated and isolated
	instance of fake Windows file structure and
	registers, where Wine can run Windows apps.")
	dialog.secondary_text += "\n\n"
	dialog.secondary_text += _("What can I do with more bottles?
	You are able to do whatever you want with one
	bottle without any risk to destroy other bottles.
	It means you can have bottle for native DirectX,
	bottle without sound, bottle with IE 6 and another
	bottle with IE 7.")
	dialog.secondary_text += "\n\n"
	dialog.secondary_text += _("What should I do with the default bottle?
	The default bottle will be copied each time you
	create a new bottle. You shouldn't install apps
	inside, unless you want them in each bottle.
	You should configure it well.")
	dialog.run
	dialog.destroy
end

Gtk.main
